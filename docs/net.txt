

						Fri June  9 18:58:52 PDT 1995


1.   Inter-process Communication Services


	The inter-process communication services provide application
	programs running under VxWorks and/or UNIX (SunOS/Solaris) with
	a simple, socket-based networking and inter-process communication
	facility.  These services allow processes to communicate within
	a single processor, between processors across a backplane, or
	between processors over a network.  They also allow VxWorks tasks
	and UNIX processes to communicate with each other in any
	combination.  In all cases, the services look identical to the
	application programs.


1.1   Design Goals


	One of the design goals is to provide an application programming
	interface (API) for network I/O that basically looks similar to
	that for file I/O.  This interface, for example, should provide
	services for communicating processes to open a network connection
	with a peer, read or write information over the established
	connection, and close the connection.

	The API should also maintain the file descriptor semantics
	of UNIX and VxWorks to allow application processes to perform
	network I/O multiplexing via the "select" system call.  This is
	particularly useful when an application process may be waiting for
	connection requests from more than one endpoint, or when data may
	arrive from many input sources, possibly together with other
	connection requests.  See the overview of the services below for a
	detailed description of this capability.

	The services will be based on Internet domain sockets and designed
	to support both TCP/IP and UDP/IP protocols.  TCP/IP is used for
	reliable, full-duplex, connection-oriented communications between
	processes, and UDP/IP for unreliable, half-duplex, connectionless
	communications.  Initially, however, only support for TCP/IP and
	broadcast messages will be provided.

	Since TCP is a byte-stream protocol that does not provide any
	record boundaries to the communication data stream, the API for
	the network services will support a message-based service that
	preserves the sender's message boundaries for the receiver
	process.  Messages can be sent and received as discrete units
	between application programs regardless of the protocols being
	used, thereby simplifying their communication interface.

	Lastly, the API should be flexible enough to allow both iterative
	server and concurrent server applications to be written.  Most
	users, however, should only be concerned with writing iterative
	servers when implementing the server's end of a client-server
	application.


1.2   Service Overview


	The network communication services consist of the following
	functions:

	a.  Initialize server:

	    net_init()

	    initializes the network connection for a server in a
	    client-server communication application by opening a virtual
	    circuit to listen for incoming connection requests from a client.
	    This function is to be called by every server process as a
	    first step in establishing a reliable, full-duplex,
	    connection-oriented communication channel.

	b.  Accepting connections:

	    net_accept()

	    accepts a connection request from a client process that issued
	    a net_connect() call to connect to a server process.  The
	    server must have previously called net_init() before calling
	    net_accept().  Once a connection is established, read and write
	    can be performed between the two connected endpoints.

	c.  Making connections:

	    net_connect()

	    initiates a connection request to a listening server process.
	    This is to be called by a client process to establish a
	    connection with a server.  Once the request is accepted,
	    messages can be exchanged over the established connection.

	d.  Sending and receiving data:

	    net_send()
	    net_recv()

	    send and receive data, respectively, in either a
	    connection-oriented or connectionless communication.  As
	    described above, net_send() and net_recv() will preserve
	    message boundaries between senders and receivers regardless of
	    the protocols being selected.

	c.  Close connections:

	    net_close()

	    closes a previously opened endpoint.  This is called by both
	    client and server processes to close a connection.


	The following examples show how the above network services might
	be used to implement a typical (iterative) server process and a
	client process that connects to the server:

	server:
	------

	int listen_fd, msg_fd;

	/* initialize server's network connection */

	if ( (listen_fd = net_init ( ... )) < 0 )
	    error ("net_init() error");

	while (true) {

	    /* accept connections */
	    msg_fd = net_accept (listen_fd, ... );

	    if (msg_fd < 0)
		error ("net_accept() error");
	    else {
		process_msg (msg_fd);	/* service client's requests */
		net_close (msg_fd);
	    }
	}


	Each time through the loop, the server accepts a connection from a
	client and starts servicing the client's requests.  It then
	terminates the connection and waits for another connection
	request via the original listen endpoint.


	client:
	------

	int msg_fd;

	/* initiate connection request to server */

	if ( (msg_fd = net_connect ( ... )) < 0)
	    error ("net_connect() error");

	/* connection established */

	while (more) {

	    net_send (msg_fd, ... );	/* client's request */

	    net_recv (msg_fd, ... );	/* server's reply */
	    ...
	}

	net_close (msg_fd);


1.3   Service Description


	The following describes the functions provided for network
	communications under UNIX and VxWorks, using the format of the
	UNIX man pages.




NAME
	net_init - initialize a server's listening endpoint


SYNOPSIS
	#include "net_appl.h"

	int net_init (endpoint)
	char *endpoint;


DESCRIPTION
	net_init() initializes the network connection for a server and
	opens a listening endpoint to listen for incoming connection
	requests.  net_init() is to be called by every server process as a
	first step in establishing a reliable, full-duplex TCP connection
	with a client process.  It returns a socket descriptor to be used
	in a subsequent net_accept() call to accept incoming connection
	requests.  The returned socket can also be used in a select()
	system call to check for pending connection requests before
	calling net_accept().  After a connection is established, the
	server can either continue waiting for and accepting new
	connections or close the listen socket.

	The endpoint parameter is a predefined character string denoting a
	unique endpoint name (address) that this server process is to be
	known as.  To improve compile-time checking, the endpoint names
	are provided as symbolic constants in the header file net_appl.h
	and should be used as such.


RETURN VALUES
	On success, net_init() returns a file descriptor for the listening
	socket to be used in a subsequent net_accept() call.

	On failure, it returns:

	NBADENDPT	when the endpoint name is not a valid BVR endpoint.

	ERROR		on a system call error, with errno containing the
			error indication.


SEE ALSO
	net_accept(), net_connect(), net_send(), net_recv(), net_close()





NAME
	net_accept - accept a connection request


SYNOPSIS
	#include "net_appl.h"

	int net_accept (listenfd, mode)
	int listenfd;
	io_mode mode;


DESCRIPTION
	net_accept() accepts a connection request from and establishes a
	full-duplex TCP connection with a client process that issued a
	net_connect() call to connect to a server.  The server must have
	previously called net_init() prior to calling net_accept().
	net_accept() returns a file descriptor for the connected socket
	to be used in subsequent net_send(), net_recv(), or net_close()
	calls.  The connected socket can also be used in a select() system
	call to perform I/O multiplexing.

	The argument listenfd is a file descriptor for the listen socket
	returned from a previous call to net_init().

	The argument mode specifies the I/O mode of the listening socket
	and can be set to either BLOCKING or NON_BLOCKING.  If mode is set
	to BLOCKING and no pending connection requests are present,
	net_accept() blocks the caller until a connection is established.
	If mode is NON_BLOCKING and no pending connections are present,
	net_accept() returns immediately with an error indication as
	described below.


RETURN VALUES
	On success, net_accept() returns a file descriptor for the
	connected socket to be used in a subsequent net_send(),
	net_recv(), or net_close() call.

	On failure, it returns:

	NBADFD		when listenfd is not a valid socket descriptor.

	NBADMODE	when the mode is not a valid I/O mode.

	NWOULDBLOCK	when the I/O mode is NON_BLOCKING and no
			connection requests are present to be accepted.

	ERROR		on a system call error, with errno containing the
			error indication.


SEE ALSO
	net_init(), net_connect(), net_send(), net_recv(), net_close()





NAME
	net_connect - initiate a connection request to a listening process


SYNOPSIS
	#include "net_appl.h"

	int net_connect (endpoint, hostname, pname, mode)
	char *endpoint;
	char *hostname;
	int pname;
	io_mode mode;


DESCRIPTION
	net_connect() initiates a connection request to a listening
	process and is called by a client process to establish a
	connection with a server.  Once the connection request is accepted
	by a server calling net_accept(), messages can be exchanged over
	the established connection.  net_connect() returns a file descriptor
	for the connected socket to be used in subsequent net_send(),
	net_recv(), or net_close() calls.  The returned socket may also be
	used in a select() system call to perform I/O multiplexing.

	The endpoint parameter is a predefined character string specifying
	a unique remote endpoint (service) to which this process attempts
	to connect.  To improve compile-time checking, the endpoint names
	are provided as symbolic constants in the header file net_appl.h
	and should be used as such.

	The hostname parameter specifies the unique name of the remote
	machine.

	The pname parameter specifies the name of the client process that
	initiates the connection request.  Process names are provided as
	symbolic constants in the header file net_appl.h, e.g. ASM, ACT,
	PSC, MDO, etc.

	The mode parameter specifies the I/O mode of the connection
	attempt and can be set to either BLOCKING or NON_BLOCKING.  If
	mode is set to BLOCKING, net_connect() blocks the caller until a
	connection is established.  If mode is NON_BLOCKING and the
	connection cannot be completed immediately, net_connect() returns
	with an error indication as described below.


RETURN VALUES
	On success, net_connect() returns a file descriptor for the
	connected socket to be used in a subsequent net_send(),
	net_recv(), or net_close() call.

	On failure, it returns:

	NBADENDPT	when the endpoint name is not a valid BVR endpoint.

	NBADHOST	when the hostname is not a valid BVR hostname.

	NBADPROCESS	when the process name is not a valid BVR process.

	NBADMODE	when the mode is not a valid I/O mode.

	NWOULDBLOCK	when the I/O mode is NON_BLOCKING and the
			connection cannot be completed immediately.

	ERROR		on a system call error, with errno containing the
			error indication.


SEE ALSO
	net_init(), net_accept(), net_send(), net_recv(), net_close()





NAME
	net_send - send message from an endpoint


SYNOPSIS
	#include "net_appl.h"

	int net_send (sockfd, msg, length, mode)
	int sockfd;
	char *msg;
	int length;
	io_mode mode;


DESCRIPTION
	net_send() sends a message to another endpoint in either a
	connection-oriented or connectionless communication.  net_send()
	preserves message boundaries between the sender and receiver
	regardless of the protocols being selected.

	The sockfd parameter is a socket descriptor returned from a
	previous call to net_connect() or net_accept().  It may be used
	with the select() system call to determine when it is possible to
	send more data.

	The msg parameter is a pointer to a memory area containing the
	message to be sent.  The length of the message is given by
	length.

	The mode parameter specifies the I/O mode to be performed and can
	be set to either BLOCKING or NON_BLOCKING.  If mode is BLOCKING,
	net_send() blocks the caller until the message is sent.  If mode
	is NON_BLOCKING and the I/O cannot be completed immediately,
	net_send() returns with an error indication as described below.


RETURN VALUES
	On success, net_send() returns the number of bytes sent.  If a
	broken connection condition is detected, net_send() will return
	NEOF.

	On failure, it returns:

	NBADFD		when sockfd is not a valid socket descriptor.

	NBADADDR	when the message pointer is not a valid pointer.

	NBADLENGTH	when the requested message length either exceeds
			the maximum length allowed or is less than the
			minimum required.

	NBADMODE	when the mode is not a valid I/O mode.

	NWOULDBLOCK	when the I/O mode is NON_BLOCKING and no
			messages could be sent immediately.  It is
			possible, however, that a partial message may have
			been sent when this error is returned.

	ERROR		on a system call error, with errno containing the
			error indication.


SEE ALSO
	net_init(), net_accept(), net_connect(), net_recv(), net_close()





NAME
	net_recv - receive message from an endpoint


SYNOPSIS
	#include "net_appl.h"

	int net_recv (sockfd, buffer, length, mode)
	int sockfd;
	char *buffer;
	int length;
	io_mode mode;


DESCRIPTION
	net_recv() receives a message from another endpoint in either a
	connection-oriented or connectionless communication.  net_recv()
	preserves message boundaries between the sender and receiver
	regardless of the protocols being selected.

	The sockfd parameter is a socket descriptor returned from a
	previous call to net_connect() or net_accept().  It may be used
	with the select() system call to determine when more data is
	available to be received.

	The buffer parameter is a pointer to a memory area large enough to
	hold the number of bytes specified by length.  The received
	message will be placed into the buffer area for up to length
	bytes.  If the message is too long to fit in the supplied buffer,
	it will be truncated and the excess bytes discarded.  The actual
	number of bytes received is returned by net_recv().

	The mode parameter specifies the I/O mode to be performed and can
	be set to either BLOCKING or NON_BLOCKING.  If mode is BLOCKING,
	net_recv() blocks the caller until a message is received.  If mode
	is NON_BLOCKING and the I/O cannot be completed immediately,
	net_recv() returns with an error indication as described below.


RETURN VALUES
	On success, net_recv() returns the number of bytes received.  If a
	broken connection condition is detected, net_recv() will return
	NEOF.

	On failure, it returns:

	NBADFD		when sockfd is not a valid socket descriptor.

	NBADADDR	when the buffer pointer is not a valid pointer.

	NBADLENGTH	when the requested message length is less than
			the minimum length required.

	NBADMODE	when the mode is not a valid I/O mode.

	NSYNCERR	when the incoming message boundaries are out of
			sync.

	NWOULDBLOCK	when the I/O mode is NON_BLOCKING and no
			messages were available to be received.  It is
			possible, however, that a partial message may have
			been received when this error is returned.

	ERROR		on a system call error, with errno containing the
			error indication.


SEE ALSO
	net_init(), net_accept(), net_connect(), net_send(), net_close()





NAME
	net_close - close communication endpoint


SYNOPSIS
	#include "net_appl.h"

	int net_close (sockfd)
	int sockfd;


DESCRIPTION
	net_close() closes the communication endpoint identified by the
	supplied socket descriptor and deletes the descriptor for future
	re-use.

	The sockfd parameter is a socket descriptor returned from a
	previous call to net_init(), net_accept(), or net_connect() and
	specifies the endpoint to be closed.


RETURN VALUES
	net_close() returns:

	SUCCESS		on success.

	On failure, it returns:

	NBADFD		when sockfd is not a valid socket descriptor.

	ERROR		on a system call error, with errno containing the
			error indication.


SEE ALSO
	net_init(), net_accept(), net_connect(), net_send(), net_recv()





NAME
	net_getpeername - get name and host of connected peer


SYNOPSIS
	#include "net_appl.h"

	int net_getpeername (sockfd, pname, hostname, namelen)
	int sockfd;
	int *pname;
	char *hostname;
	int namelen;


DESCRIPTION
	net_getpeername() returns the host name and process name of the
	peer connected to the endpoint identified by socket sockfd.

	The sockfd parameter is a socket descriptor returned from a
	previous call to net_accept() or net_connect() and specifies the
	endpoint for which the peer name is to be returned.

	The int pointed to by pname contains the peer process name on
	return.  Process names are defined as symbolic constants in the
	header file net_appl.h, e.g. ASM, ACT, PSC, MDO, etc.

	The peer's host name is returned in the array hostname.  The
	namelen parameter specifies the size of the array.  The returned
	name is null-terminated unless insufficient space is provided.


RETURN VALUES
	net_getpeername() returns:

	SUCCESS		on success.

	On failure, it returns:

	NBADFD		when sockfd is not a valid socket descriptor.

	NBADADDR	when pname and/or hostname are not valid pointers.

	NBADHOST	when the peer's host entry cannot be found.  This
			is an internal error condition.

	NBADPROCESS	when the peer's process name entry cannot be
			found.  This is an internal error condition.

	ERROR		on a system call error, with errno containing the
			error indication.


SEE ALSO
	net_accept(), net_connect()

